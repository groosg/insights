{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hello there \u00b6 My name is Groosg, I'm a software engineer with experience in building and running applications and distributed systems. More recently, I have been focusing on the security of applications and cloud environments. I decided to put together this website to have some fun and to share technical stuff. I don't know exactly which stuff but I think we'll figure this out. I hope you enjoy the content. For feedback and interaction, you can find me on Twitter . Speaking of Twitter, this website was created live on Twitter and this was really fun - check this out .","title":"Home"},{"location":"#hello-there","text":"My name is Groosg, I'm a software engineer with experience in building and running applications and distributed systems. More recently, I have been focusing on the security of applications and cloud environments. I decided to put together this website to have some fun and to share technical stuff. I don't know exactly which stuff but I think we'll figure this out. I hope you enjoy the content. For feedback and interaction, you can find me on Twitter . Speaking of Twitter, this website was created live on Twitter and this was really fun - check this out .","title":"Hello there"},{"location":"tips/gh_setup/","text":"A Serious GitHub Account Setup Guide \u00b6 In this guide, I'm going to show you how to configure your GitHub account to improve security and privacy. This guide is somewhat opinionated about some settings, feel free to adjust as you wish. The GitHub documentation is very complete, so for specific instructions and commands, follow the links and apply the recommendations in this guide. Enable 2FA \u00b6 Enable two-factor authentication - follow the instructions in the GitHub docs. Associate your 2FA with a password manager with TOTP support. Consider a password manager instead of a specialized TOTP auth app (see the info box below). Don't use SMS. Store your recovery codes in a secure location. I strongly recommend storing the recovery codes in a password manager as well. Even if you lose your phone, you can access the password manager via browser and retrieve the recovery codes. Optional: Consider configuring a security key . A security key will allow you to log in using Face ID, Touch ID, etc., or even a YubiKey. It's time for a password manager If you don't use a password manager, it's time for you to consider one. Instead of relying on the browsers' password storage across multiple devices (which is ok but not great) consider creating an account in a password manager service and centralizing your passwords, TOTP access, and other sensitive notes. I use 1Password and recommend it as a user (I have no commercial affiliation with them). It's not free but a personal account is really cheap. Another interesting alternative is bitwarden . I haven't used bitwarden, but I have heard good things about them. Configure SSH key \u00b6 Generate an SSH key to access GitHub via the git CLI. Make sure you add the SSH key to the ssh-agent. It will make things transparent for you in the day-to-day. Don't use username and password to fetch and push code. Email Privacy Settings \u00b6 Go to the email settings and mark the checkbox Keep my email addresses private . Set your no-reply email <username>@users.noreply.github.com as the commit email address in Git . git config --global user.email \"<username>@users.noreply.github.com\" In the same email settings page, mark the checkbox Block command line pushes that expose my email - see here an explanation . See this documentation for more details . GitHub emails used in commits are publicly available to anyone Every commit pushed to public GitHub repos is easily available via the GitHub API, and so are the emails used in these commits - see an example here . Configure Commit Signature Verification \u00b6 See the commit signature verification page for an explanation. Generate a new GPG key for GitHub. Warning Avoid using an existing key since GitHub will leak all emails assigned to your GPG key regardless if they are associated with your GitHub account or not - see this example , you can find 6 distinct emails at the moment of this writing, including emails that have not to do with GitHub. When prompted for the GPG key creation, use the following recommendations: Please select what kind of key you want : Use a sing only key (4) RSA (sign only) . What keysize do you want? : Use the size recommended in the GitHub docs 4096 . Key is valid for? : Specify a time to live 5y . Email address : Use your no-reply address <username>@users.noreply.github.com . And, of course, set a reosanable passphrase. Follow the remaining steps to add your GPG key to GitHub and configure Git with your signing key . Enable vigilante mode . After you save your GPG public key on GitHub, on the same page mark the checkbox Flag unsigned commits as unverified . If anyone tries to impersonate you, the commit will be flagged as Unverified . Why are we configuring commit signature verification? Git impersonation is a real problem that, while most of the time is used only for bad jokes, can cause a lot of confusion and bring some real software supply chain concerns. There is plenty of content on the Internet about this subject. A good one is the blog post How to Spoof Any User on Github\u2026and What to Do to Prevent It .","title":"GitHub Account Setup"},{"location":"tips/gh_setup/#a-serious-github-account-setup-guide","text":"In this guide, I'm going to show you how to configure your GitHub account to improve security and privacy. This guide is somewhat opinionated about some settings, feel free to adjust as you wish. The GitHub documentation is very complete, so for specific instructions and commands, follow the links and apply the recommendations in this guide.","title":"A Serious GitHub Account Setup Guide"},{"location":"tips/gh_setup/#enable-2fa","text":"Enable two-factor authentication - follow the instructions in the GitHub docs. Associate your 2FA with a password manager with TOTP support. Consider a password manager instead of a specialized TOTP auth app (see the info box below). Don't use SMS. Store your recovery codes in a secure location. I strongly recommend storing the recovery codes in a password manager as well. Even if you lose your phone, you can access the password manager via browser and retrieve the recovery codes. Optional: Consider configuring a security key . A security key will allow you to log in using Face ID, Touch ID, etc., or even a YubiKey. It's time for a password manager If you don't use a password manager, it's time for you to consider one. Instead of relying on the browsers' password storage across multiple devices (which is ok but not great) consider creating an account in a password manager service and centralizing your passwords, TOTP access, and other sensitive notes. I use 1Password and recommend it as a user (I have no commercial affiliation with them). It's not free but a personal account is really cheap. Another interesting alternative is bitwarden . I haven't used bitwarden, but I have heard good things about them.","title":"Enable 2FA"},{"location":"tips/gh_setup/#configure-ssh-key","text":"Generate an SSH key to access GitHub via the git CLI. Make sure you add the SSH key to the ssh-agent. It will make things transparent for you in the day-to-day. Don't use username and password to fetch and push code.","title":"Configure SSH key"},{"location":"tips/gh_setup/#email-privacy-settings","text":"Go to the email settings and mark the checkbox Keep my email addresses private . Set your no-reply email <username>@users.noreply.github.com as the commit email address in Git . git config --global user.email \"<username>@users.noreply.github.com\" In the same email settings page, mark the checkbox Block command line pushes that expose my email - see here an explanation . See this documentation for more details . GitHub emails used in commits are publicly available to anyone Every commit pushed to public GitHub repos is easily available via the GitHub API, and so are the emails used in these commits - see an example here .","title":"Email Privacy Settings"},{"location":"tips/gh_setup/#configure-commit-signature-verification","text":"See the commit signature verification page for an explanation. Generate a new GPG key for GitHub. Warning Avoid using an existing key since GitHub will leak all emails assigned to your GPG key regardless if they are associated with your GitHub account or not - see this example , you can find 6 distinct emails at the moment of this writing, including emails that have not to do with GitHub. When prompted for the GPG key creation, use the following recommendations: Please select what kind of key you want : Use a sing only key (4) RSA (sign only) . What keysize do you want? : Use the size recommended in the GitHub docs 4096 . Key is valid for? : Specify a time to live 5y . Email address : Use your no-reply address <username>@users.noreply.github.com . And, of course, set a reosanable passphrase. Follow the remaining steps to add your GPG key to GitHub and configure Git with your signing key . Enable vigilante mode . After you save your GPG public key on GitHub, on the same page mark the checkbox Flag unsigned commits as unverified . If anyone tries to impersonate you, the commit will be flagged as Unverified . Why are we configuring commit signature verification? Git impersonation is a real problem that, while most of the time is used only for bad jokes, can cause a lot of confusion and bring some real software supply chain concerns. There is plenty of content on the Internet about this subject. A good one is the blog post How to Spoof Any User on Github\u2026and What to Do to Prevent It .","title":"Configure Commit Signature Verification"}]}